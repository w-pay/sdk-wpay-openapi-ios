#import <Foundation/Foundation.h>
#import "OAICreateMerchantPaymentSessionResponse.h"
#import "OAICreateMerchantSchemaResults.h"
#import "OAICreatePaymentQRCodeResults.h"
#import "OAICreatePaymentRequestResults.h"
#import "OAICreatePaymentSessionRequest.h"
#import "OAICustomerPaymentSessionResult.h"
#import "OAICustomerPreferencesResult.h"
#import "OAIError.h"
#import "OAIGetMerchantPaymentDetailsResults.h"
#import "OAIGetMerchantPaymentsResults.h"
#import "OAIGetMerchantTransactionDetailsResults.h"
#import "OAIGetMerchantTransactionsResults.h"
#import "OAIMerchantPaymentRequest.h"
#import "OAIMerchantPreferences.h"
#import "OAIMerchantSchema.h"
#import "OAIMerchantSchemaDetailsResult.h"
#import "OAIMerchantSchemaResult.h"
#import "OAIPaymentQRCodeDetails.h"
#import "OAIRefundMerchantTransactionRequest.h"
#import "OAIRefundMerchantTransactionResults.h"
#import "OAIUpdatePaymentSessionRequest1.h"
#import "OAIApi.h"

/**
* Village Wallet
* APIs for Village Wallet
*
* The version of the OpenAPI document: 0.0.5
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIMerchantApi: NSObject <OAIApi>

extern NSString* kOAIMerchantApiErrorDomain;
extern NSInteger kOAIMerchantApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Invalidate QR Code
/// Cancel an existing QC code.  Effectively expires the QR code
///
/// @param xMerchantID 
/// @param qrId The ID of the specific QR Code
/// 
///  code:204 message:"QR code has been successfully expired.  Not content returned",
///  code:400 message:"The QR code specified doesn't exist"
///
/// @return void
-(NSURLSessionTask*) cancelPaymentQRCodeWithXMerchantID: (NSString*) xMerchantID
    qrId: (NSString*) qrId
    completionHandler: (void (^)(NSError* error)) handler;


/// Create Payment Session
/// Create a new payment session
///
/// @param xMerchantID 
/// @param createPaymentSessionRequest 
/// 
///  code:200 message:"Successful response"
///
/// @return OAICreateMerchantPaymentSessionResponse*
-(NSURLSessionTask*) createCustomerPaymentSessionWithXMerchantID: (NSString*) xMerchantID
    createPaymentSessionRequest: (OAICreatePaymentSessionRequest*) createPaymentSessionRequest
    completionHandler: (void (^)(OAICreateMerchantPaymentSessionResponse* output, NSError* error)) handler;


/// Add Schema
/// Add a new schema that can be used in schema based payloads for this merchant
///
/// @param xMerchantID 
/// @param merchantSchema 
/// 
///  code:200 message:"Successful response"
///
/// @return OAICreateMerchantSchemaResults*
-(NSURLSessionTask*) createMerchantSchemaWithXMerchantID: (NSString*) xMerchantID
    merchantSchema: (OAIMerchantSchema*) merchantSchema
    completionHandler: (void (^)(OAICreateMerchantSchemaResults* output, NSError* error)) handler;


/// Create QR Code
/// Create a new QR code for an existing payment
///
/// @param xMerchantID 
/// @param paymentQRCodeDetails 
/// 
///  code:200 message:"Successful response",
///  code:400 message:"The specified payment request doesn't exist or has already been closed"
///
/// @return OAICreatePaymentQRCodeResults*
-(NSURLSessionTask*) createPaymentQRCodeWithXMerchantID: (NSString*) xMerchantID
    paymentQRCodeDetails: (OAIPaymentQRCodeDetails*) paymentQRCodeDetails
    completionHandler: (void (^)(OAICreatePaymentQRCodeResults* output, NSError* error)) handler;


/// Create Payment
/// Create a new payment request that can then be presented to a customer for payment
///
/// @param xMerchantID 
/// @param merchantPaymentRequest 
/// 
///  code:200 message:"Successful response"
///
/// @return OAICreatePaymentRequestResults*
-(NSURLSessionTask*) createPaymentRequestWithXMerchantID: (NSString*) xMerchantID
    merchantPaymentRequest: (OAIMerchantPaymentRequest*) merchantPaymentRequest
    completionHandler: (void (^)(OAICreatePaymentRequestResults* output, NSError* error)) handler;


/// Delete Payment
/// Cancel an existing payment by setting the expiration date/time to now and setting the remaining uses to 0.  Will only be successful if the payment is still pending.  Completed payments need to be refunded using the dedicated API for that purpose
///
/// @param xMerchantID 
/// @param paymentRequestId The ID of the specific payment request
/// 
///  code:204 message:"Payment request has been successfully expired.  Not content returned",
///  code:400 message:"The payment request specified doesn't exist"
///
/// @return void
-(NSURLSessionTask*) deleteMerchantPaymentWithXMerchantID: (NSString*) xMerchantID
    paymentRequestId: (NSString*) paymentRequestId
    completionHandler: (void (^)(NSError* error)) handler;


/// Delete Payment Session
/// Deletes a payment session by setting its expiration date/time to now
///
/// @param xMerchantID 
/// @param paymentSessionId The ID of the specific payment session to delete
/// 
///  code:204 message:"The payment session has been successfully deleted. No content returned."
///
/// @return void
-(NSURLSessionTask*) deleteMerchantPaymentSessionWithXMerchantID: (NSString*) xMerchantID
    paymentSessionId: (NSString*) paymentSessionId
    completionHandler: (void (^)(NSError* error)) handler;


/// Get Payment Details
/// Get the details for a specific payment.  Provides all types of payments and all payment content
///
/// @param xMerchantID 
/// @param paymentRequestId The ID of the specific payment request
/// 
///  code:200 message:"Successful response",
///  code:400 message:"The specified Payment Request ID doesn't exist"
///
/// @return OAIGetMerchantPaymentDetailsResults*
-(NSURLSessionTask*) getMerchantPaymentDetailsWithXMerchantID: (NSString*) xMerchantID
    paymentRequestId: (NSString*) paymentRequestId
    completionHandler: (void (^)(OAIGetMerchantPaymentDetailsResults* output, NSError* error)) handler;


/// Get Payment Session
/// Get the details of a payment session
///
/// @param xMerchantID 
/// @param paymentSessionId The ID of the specific payment session to retrieve
/// 
///  code:200 message:"Successful response"
///
/// @return OAICustomerPaymentSessionResult*
-(NSURLSessionTask*) getMerchantPaymentSessionWithXMerchantID: (NSString*) xMerchantID
    paymentSessionId: (NSString*) paymentSessionId
    completionHandler: (void (^)(OAICustomerPaymentSessionResult* output, NSError* error)) handler;


/// Get Payment List
/// Get a list of the payments initiated by the merchant, both pending and complete
///
/// @param xMerchantID 
/// @param type The type of payment requests to return: active, inactive or both (optional) (default to @"ACTIVE")
/// @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional) (default to @25)
/// @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional) (default to @1)
/// 
///  code:200 message:"Successful response"
///
/// @return OAIGetMerchantPaymentsResults*
-(NSURLSessionTask*) getMerchantPaymentsWithXMerchantID: (NSString*) xMerchantID
    type: (NSString*) type
    pageSize: (NSNumber*) pageSize
    page: (NSNumber*) page
    completionHandler: (void (^)(OAIGetMerchantPaymentsResults* output, NSError* error)) handler;


/// Get Preferences
/// Get the preferences previously set by the customer or merchant (depending on calling identity)
///
/// @param xMerchantID 
/// 
///  code:200 message:"Successful response"
///
/// @return OAICustomerPreferencesResult*
-(NSURLSessionTask*) getMerchantPreferencesWithXMerchantID: (NSString*) xMerchantID
    completionHandler: (void (^)(OAICustomerPreferencesResult* output, NSError* error)) handler;


/// Get Schema Details
/// Get the list of currently usable schema previously added for the merchant
///
/// @param xMerchantID 
/// @param schemaId The ID of the specific schema to get details for
/// 
///  code:200 message:"Successful response"
///
/// @return OAIMerchantSchemaDetailsResult*
-(NSURLSessionTask*) getMerchantSchemaDetailsWithXMerchantID: (NSString*) xMerchantID
    schemaId: (NSString*) schemaId
    completionHandler: (void (^)(OAIMerchantSchemaDetailsResult* output, NSError* error)) handler;


/// Get Schema List
/// Get the list of currently usable schema previously added for the merchant
///
/// @param xMerchantID 
/// 
///  code:200 message:"Successful response"
///
/// @return OAIMerchantSchemaResult*
-(NSURLSessionTask*) getMerchantSchemasWithXMerchantID: (NSString*) xMerchantID
    completionHandler: (void (^)(OAIMerchantSchemaResult* output, NSError* error)) handler;


/// Get Transaction Details
/// Get the details for a specific transaction previously executed with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
///
/// @param xMerchantID 
/// @param transactionId The ID of the specific transaction
/// 
///  code:200 message:"Successful response"
///
/// @return OAIGetMerchantTransactionDetailsResults*
-(NSURLSessionTask*) getMerchantTransactionDetailsWithXMerchantID: (NSString*) xMerchantID
    transactionId: (NSString*) transactionId
    completionHandler: (void (^)(OAIGetMerchantTransactionDetailsResults* output, NSError* error)) handler;


/// Get Transaction List
/// Get a list of the previously executed transactions with the merchant.  Note that amounts are relative to the merchant.  A positive amount is a positive amount transferred to a merchant
///
/// @param xMerchantID 
/// @param startTime If present, the date/time to limit transactions returned.  Transactions older than this time will not be returned (optional)
/// @param endTime If present, the date/time to limit transactions returned.  Transactions newer than this time will not be returned (optional)
/// @param pageSize The number of records to return for this page.  Defaults to 25 if absent (optional) (default to @25)
/// @param page The page of results to return with 1 indicating the first page.  Defaults to 1 if absent (optional) (default to @1)
/// 
///  code:200 message:"Successful response"
///
/// @return OAIGetMerchantTransactionsResults*
-(NSURLSessionTask*) getMerchantTransactionsWithXMerchantID: (NSString*) xMerchantID
    startTime: (NSDate*) startTime
    endTime: (NSDate*) endTime
    pageSize: (NSNumber*) pageSize
    page: (NSNumber*) page
    completionHandler: (void (^)(OAIGetMerchantTransactionsResults* output, NSError* error)) handler;


/// Get QR Code Content
/// Obtain the content or an image for an existing QR code.  If requested content type is application/json then a payload will be returned.  if requested content is image/png an image will be returned
///
/// @param xMerchantID 
/// @param qrId The ID of the specific QR Code
/// 
///  code:200 message:"Successful response",
///  code:400 message:"The specified payment request doesn't exist or has already been closed"
///
/// @return OAICreatePaymentQRCodeResults*
-(NSURLSessionTask*) getPaymentQRCodeContentWithXMerchantID: (NSString*) xMerchantID
    qrId: (NSString*) qrId
    completionHandler: (void (^)(OAICreatePaymentQRCodeResults* output, NSError* error)) handler;


/// Refund Transaction
/// Refund a previously executed transaction
///
/// @param xMerchantID 
/// @param transactionId The ID of the specific transaction to reverse
/// @param refundMerchantTransactionRequest 
/// 
///  code:200 message:"Successful response",
///  code:400 message:"The transaction specified doesn't exist or is a refund transaction already"
///
/// @return OAIRefundMerchantTransactionResults*
-(NSURLSessionTask*) refundMerchantTransactionWithXMerchantID: (NSString*) xMerchantID
    transactionId: (NSString*) transactionId
    refundMerchantTransactionRequest: (OAIRefundMerchantTransactionRequest*) refundMerchantTransactionRequest
    completionHandler: (void (^)(OAIRefundMerchantTransactionResults* output, NSError* error)) handler;


/// Set Preferences
/// Change the preferences for the customer or merchant (depending on calling identity)
///
/// @param xMerchantID 
/// @param merchantPreferences 
/// 
///  code:204 message:"Preferences successfully updated.  No content returned"
///
/// @return void
-(NSURLSessionTask*) setMerchantPreferencesWithXMerchantID: (NSString*) xMerchantID
    merchantPreferences: (OAIMerchantPreferences*) merchantPreferences
    completionHandler: (void (^)(NSError* error)) handler;


/// Update Payment Session
/// Update the payment session details
///
/// @param xMerchantID 
/// @param paymentSessionId The ID of the specific payment session to retrieve
/// @param updatePaymentSessionRequest1 
/// 
///  code:204 message:"The payment session has been successfully updated. No content returned."
///
/// @return void
-(NSURLSessionTask*) updateMerchantPaymentSessionWithXMerchantID: (NSString*) xMerchantID
    paymentSessionId: (NSString*) paymentSessionId
    updatePaymentSessionRequest1: (OAIUpdatePaymentSessionRequest1*) updatePaymentSessionRequest1
    completionHandler: (void (^)(NSError* error)) handler;



@end
