#import <Foundation/Foundation.h>
#import "OAIBaseErrorResponse.h"
#import "OAIDeleteWalletRequest.h"
#import "OAIGiftcardsBalanceRequest.h"
#import "OAIGiftcardsBalanceResponse.h"
#import "OAIGuestTokenizeApplePayRequest.h"
#import "OAIGuestTokenizeGiftcardRequest.h"
#import "OAIGuestTokenizeGiftcardResponse.h"
#import "OAIGuestTokenizePaypalRequest.h"
#import "OAIGuestTokenizePaypalResponse.h"
#import "OAIImportPaymentInstrumentsRequest.h"
#import "OAIImportPaymentInstrumentsResponse.h"
#import "OAIInitiateCardCaptureRequest.h"
#import "OAIInitiateCardCaptureResponse.h"
#import "OAIListPaymentInstrumentsRequest.h"
#import "OAIListPaymentInstrumentsResponse.h"
#import "OAIMerchantProfileResponse.h"
#import "OAITokenizeAndroidPayRequest.h"
#import "OAITokenizeAndroidPayResponse.h"
#import "OAITokenizeApplePayRequest.h"
#import "OAITokenizeApplePayResponse.h"
#import "OAITokenizeGiftcardRequest.h"
#import "OAITokenizeGiftcardResponse.h"
#import "OAITokenizeGooglePayRequest.h"
#import "OAITokenizeGooglePayResponse.h"
#import "OAITokenizePaypalRequest.h"
#import "OAITokenizePaypalResponse.h"
#import "OAITransactionHistoryRequest.h"
#import "OAITransactionHistoryResponse.h"
#import "OAIVerifyPaymentInstrumentsErrorResponse.h"
#import "OAIVerifyPaymentInstrumentsRequest.h"
#import "OAIVerifyPaymentInstrumentsSuccessResponse.h"
#import "OAIApi.h"

/**
* Wpay APIs
* Wpay APIs for payments and gifting
*
* The version of the OpenAPI document: 1.0.6
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/



@interface OAIWalletManagementApi: NSObject <OAIApi>

extern NSString* kOAIWalletManagementApiErrorDomain;
extern NSInteger kOAIWalletManagementApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(OAIApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Update Android Pay Token
/// Update an Android Pay payment instrument.
///
/// @param paymentInstrumentId The id of the android pay payment instrument to update.
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeAndroidPayResponse*
-(NSURLSessionTask*) androidpayTokenizePaymentInstrumentIdPostWithPaymentInstrumentId: (NSString*) paymentInstrumentId
    xApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizeAndroidPayRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizeAndroidPayResponse* output, NSError* error)) handler;


/// Tokenize Android Pay
/// Create a payment instrument id for a provided Android Pay wallet item.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeAndroidPayResponse*
-(NSURLSessionTask*) androidpayTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizeAndroidPayRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizeAndroidPayResponse* output, NSError* error)) handler;


/// Update Apple Pay Token
/// Update an Apple Pay payment instrument.
///
/// @param paymentInstrumentId The id of the apple pay payment instrument to update.
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeApplePayResponse*
-(NSURLSessionTask*) applepayTokenizePaymentInstrumentIdPostWithPaymentInstrumentId: (NSString*) paymentInstrumentId
    xApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizeApplePayRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizeApplePayResponse* output, NSError* error)) handler;


/// Tokenize Apple Pay
/// Create a payment instrument id for a provided Apple Pay wallet item.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeApplePayResponse*
-(NSURLSessionTask*) applepayTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizeApplePayRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizeApplePayResponse* output, NSError* error)) handler;


/// Initiate Card Capture
/// Get a credit card detials input iframe (URL) for the consumer. This API is rate limited to 10 requests per minute per shopper id.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIInitiateCardCaptureResponse*
-(NSURLSessionTask*) cardsInitcapturePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIInitiateCardCaptureRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAIInitiateCardCaptureResponse* output, NSError* error)) handler;


/// Gift Cards Balance
/// Get the balance and expiryinfo for the provided gift cards. This API is rate limited to 5 requests per minute per shopper id.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIGiftcardsBalanceResponse*
-(NSURLSessionTask*) giftcardsBalancePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIGiftcardsBalanceRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    xEverydayPayWallet: (NSString*) xEverydayPayWallet
    completionHandler: (void (^)(OAIGiftcardsBalanceResponse* output, NSError* error)) handler;


/// Tokenize Giftcard
/// Create a paymment intrument id for a provided gift card.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeGiftcardResponse*
-(NSURLSessionTask*) giftcardsTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizeGiftcardRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    xEverydayPayWallet: (NSString*) xEverydayPayWallet
    completionHandler: (void (^)(OAITokenizeGiftcardResponse* output, NSError* error)) handler;


/// Update Google Pay Token
/// Update a Google Pay payment instrument.
///
/// @param paymentToken The payment token of the google pay payment instrument to update.
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeGooglePayResponse*
-(NSURLSessionTask*) googlepayTokenizePaymentTokenPostWithPaymentToken: (NSString*) paymentToken
    xApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizeGooglePayRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizeGooglePayResponse* output, NSError* error)) handler;


/// Tokenize Google Pay
/// Create a payment token for a provided Google Pay wallet item.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeGooglePayResponse*
-(NSURLSessionTask*) googlepayTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizeGooglePayRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizeGooglePayResponse* output, NSError* error)) handler;


/// Guest Tokenize Apple Pay
/// Create a payment instrument id for a provided Apple Pay wallet item of a guest user.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeApplePayResponse*
-(NSURLSessionTask*) guestApplepayTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIGuestTokenizeApplePayRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizeApplePayResponse* output, NSError* error)) handler;


/// Guest Initiate Card Capture
/// Get a credit card detials input iframe (URL) for a guest user. This API is rate limited to 10 requests per minute per guest shopper id.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIInitiateCardCaptureResponse*
-(NSURLSessionTask*) guestCardsInitcapturePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIInitiateCardCaptureRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAIInitiateCardCaptureResponse* output, NSError* error)) handler;


/// Guest Tokenize Giftcard
/// Create a paymment intrument id for a provided gift card of a guest user.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIGuestTokenizeGiftcardResponse*
-(NSURLSessionTask*) guestGiftcardsTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIGuestTokenizeGiftcardRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAIGuestTokenizeGiftcardResponse* output, NSError* error)) handler;


/// Guest Tokenize Google Pay
/// Create a payment token for a provided Google Pay wallet item of a guest user.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizeGooglePayResponse*
-(NSURLSessionTask*) guestGooglepayTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizeGooglePayRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizeGooglePayResponse* output, NSError* error)) handler;


/// Guest Tokenize Paypal
/// Create a paymment intrument id for a provided paypal account of a guest user.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIGuestTokenizePaypalResponse*
-(NSURLSessionTask*) guestPaypalTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIGuestTokenizePaypalRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAIGuestTokenizePaypalResponse* output, NSError* error)) handler;


/// List Payment Instruments
/// Get the stored payment intruments of a consumer.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIListPaymentInstrumentsResponse*
-(NSURLSessionTask*) instrumentsGetWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    xEverydayPayWallet: (NSString*) xEverydayPayWallet
    completionHandler: (void (^)(OAIListPaymentInstrumentsResponse* output, NSError* error)) handler;


/// Import Payment Instruments
/// Import a consumers credit cards (from WebPay) and paypal accounts to a new wallet. This API is IP restricted to allow unauthenticated server side calls.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIImportPaymentInstrumentsResponse*
-(NSURLSessionTask*) instrumentsImportPostWithXApiKey: (NSString*) xApiKey
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIImportPaymentInstrumentsRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAIImportPaymentInstrumentsResponse* output, NSError* error)) handler;


/// Delete Payment Instrument
/// Delete a stored payment intrument of a consumer.
///
/// @param paymentInstrumentId The id of the payment instrument to delete.
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return NSObject*
-(NSURLSessionTask*) instrumentsPaymentInstrumentIdDeleteWithPaymentInstrumentId: (NSString*) paymentInstrumentId
    xApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    xEverydayPayWallet: (NSString*) xEverydayPayWallet
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;


/// List Payment Instruments
/// Get the stored payment intruments of a consumer. This API is IP restricted to allow unauthenticated server side calls.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIListPaymentInstrumentsResponse*
-(NSURLSessionTask*) instrumentsPostWithXApiKey: (NSString*) xApiKey
    body: (OAIListPaymentInstrumentsRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAIListPaymentInstrumentsResponse* output, NSError* error)) handler;


/// Verify Payment Instruments
/// Verify if a provided payment instrument is valid and optionally perform a fraud check on the instrument.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIVerifyPaymentInstrumentsSuccessResponse*
-(NSURLSessionTask*) instrumentsVerifyPostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIVerifyPaymentInstrumentsRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    xEverydayPayWallet: (NSString*) xEverydayPayWallet
    completionHandler: (void (^)(OAIVerifyPaymentInstrumentsSuccessResponse* output, NSError* error)) handler;


/// Merchant Profile
/// Get the current configuration set of the merchant. If this API is called without a valid access token it is IP restricted to allow unauthenticated server side calls.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAIMerchantProfileResponse*
-(NSURLSessionTask*) merchantsProfileGetWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAIMerchantProfileResponse* output, NSError* error)) handler;


/// Tokenize Paypal
/// Create a paymment intrument id for a provided paypal account.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITokenizePaypalResponse*
-(NSURLSessionTask*) paypalTokenizePostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITokenizePaypalRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    completionHandler: (void (^)(OAITokenizePaypalResponse* output, NSError* error)) handler;


/// Transaction History
/// Get the transaction history of a consumer.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param authorization The Bearer token for the request. The Bearer token authentication approach can be used by API consumers that implement a client-to-server architecture (mobile app, browser site/page) or server-to-server architecture (BFF, microservice, web server, etc.) for calling Digital Pay APIs. However the Bearer token for a shopper/customer must be obtained from the IDM Server Token API which can only be accessed from a server-to-server architecture (BFF, microservice, web server, etc.). The Authorization header is only required if the X-JWS-Signature header is not present.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible. The X-JWS-Signature header is only required if the Authorization header is not present.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return OAITransactionHistoryResponse*
-(NSURLSessionTask*) transactionsPostWithXApiKey: (NSString*) xApiKey
    authorization: (NSString*) authorization
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAITransactionHistoryRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    xEverydayPayWallet: (NSString*) xEverydayPayWallet
    completionHandler: (void (^)(OAITransactionHistoryResponse* output, NSError* error)) handler;


/// Delete Wallet
/// Delete a consumers wallet. This API is IP restricted to allow unauthenticated server side calls.
///
/// @param xApiKey The API key for the request. The API keys (non-prod/prod) will be supplied by the Digital Pay team.
/// @param xJWSSignature The JWS signature used to sign the request. The JWS signature authentication approach can only be used by API consumers that implement a server-to-server architecture (BFF, microservice, web server, etc.) for calling the Digital Pay APIs. The RSA private key, required to generate the signiture, has to be stored securely and should not be publicly accessible.
/// @param body 
/// @param xAuthKey (Deprecated) You are required to use this header to provide the base64 encoded API key. Requires the X-Auth-Digest header to be present. (optional)
/// @param xAuthDigest (Deprecated) You are required to use this header to provide the encrypted API key. The value is the API key encrypted with the client secret key. Requires the X-Auth-Key header to be present. (optional)
/// @param xMessageId This id is used to keep track of the request and its response in the Digital Pay platform. If no value is provided for the request header, Apigee will auto generate an id to use for the request. This header will also be returned in the response and will have the value passed in (or auto generated) from the request. (optional)
/// @param xEverydayPayWallet A flag to indicate if the Everyday Pay wallet should be used when processing the API request. Set the header value to \&quot;true\&quot; to use the Everyday Pay wallet. Set the header value to \&quot;false\&quot; or exclude the header completely to use the default merchant wallet. (optional)
/// 
///  code:200 message:"Success",
///  code:400 message:"Missing or invalid request payload or value.",
///  code:401 message:"Invalid API Key or API Product Match Not Found or Invalid Token or Expired Token.",
///  code:404 message:"Invalid API Route.",
///  code:500 message:"An unknown error occurred.",
///  code:501 message:"A Business Validation error occurred.",
///  code:502 message:"An Internal System error occurred.",
///  code:503 message:"The Service is currently unavailable.",
///  code:504 message:"The request timed out."
///
/// @return NSObject*
-(NSURLSessionTask*) walletDeletePostWithXApiKey: (NSString*) xApiKey
    xJWSSignature: (NSString*) xJWSSignature
    body: (OAIDeleteWalletRequest*) body
    xAuthKey: (NSString*) xAuthKey
    xAuthDigest: (NSString*) xAuthDigest
    xMessageId: (NSString*) xMessageId
    xEverydayPayWallet: (NSString*) xEverydayPayWallet
    completionHandler: (void (^)(NSObject* output, NSError* error)) handler;



@end
